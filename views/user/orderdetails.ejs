<div class="order-detail-container">

    <div class="order-detail-header">
        <h1 class="order-detail-number">Order # <%= order?.OrderId %>
        </h1>

    </div>

    <div class="order-detail-info">
        <div class="order-detail-info-group">
            <h3>Order Date</h3>
            <p>
                <%= order?.orderDate.toDateString() %>
            </p>

            <% if (order?.items[0].PaymentStatus==='Failed' ) { %>

                <button id="paymentButton"
                    onclick="Repayment('<%= order?._id %>' , '<%= order?.payableAmount %>', '<%= order?.totalAmount %>', '<%= order?.couponId%>')">Repayment</button>

                <% } %>
        </div>
        <div class="order-detail-info-group">
            <h3>Shipping Address</h3>
            <p>
                <%= order?.address?.addressName%><br>
                    <%= order?.address?.streetAddress %>
            </p>
            <p>
                <%= order?.address.city %>,<%= order?.address.state %>
            </p>
        </div>
        <div class="order-detail-info-group">
            <h3>
                <%= order?.paymentMethod %>
            </h3>
            <!-- <p>VISA ending in 4242</p> -->
        </div>

        <div>

            <% if (delivered) { %>

                <a class="invoice-btn" href="/invoice/<%= order?._id %>">Invoice</a>

                <% } %>




        </div>
    </div>

    <div class="order-detail-items">

        <% order?.items?.forEach((element, index)=> { %>



            <div class="order-detail-item">

                <img src="/uploads/<%= element.productImage%>" alt="Product" class="order-detail-item-image">
                <div class="order-detail-item-details">

                    <h3 class="order-detail-item-name">
                        <%= element.productTitle%>
                    </h3>
                    <p class="order-detail-item-price">₹<%= element.price %>
                    </p>
                    <p>
                        <%= element.discount>0 ? "Discount: ₹" + (element.discount) : ""
                            %>
                    </p>
                    <p>Quantity: <%= element.quantity %>
                    </p>

                    <% if (element.orderStatus!=="Cancelled" ) { %>

                        <p>PaymentStatus:<%= element.PaymentStatus %>


                        </p>

                        <% } %>



                            <% if (element.orderStatus==="Cancelled" || element.orderStatus==="Delivered" ||
                                element.PaymentStatus==="Failed" ) { %>

                                <button disabled style="display: none;" type="button"
                                    class="order-detail-cancel-button">Cancel
                                    Order</button>

                                <% }else { %>

                                    <button type="button" class="btn btn-danger" data-bs-toggle="modal"
                                        data-bs-target="#exampleModal" data-bs-whatever="@mdo">Cancel
                                        Order</button>


                                    <div class="modal fade" id="exampleModal" tabindex="-1"
                                        aria-labelledby="exampleModalLabel" aria-hidden="true">
                                        <div class="modal-dialog">
                                            <div class="modal-content">
                                                <div class="modal-header">
                                                    <h1 class="modal-title fs-5" id="exampleModalLabel">Reason
                                                    </h1>
                                                    <button type="button" class="btn-close" data-bs-dismiss="modal"
                                                        aria-label="Close"></button>
                                                </div>
                                                <div class="modal-body">
                                                    <form>
                                                        <div class="mb-3">
                                                            <label for="message-text" class="col-form-label">Cancel
                                                                Reason</label>
                                                            <div id="error-message" style="color: red;"></div>
                                                            <textarea class="form-control" id="message-text"
                                                                placeholder="please text your reason"></textarea>
                                                        </div>
                                                    </form>
                                                </div>
                                                <div class="modal-footer">
                                                    <button type="button" class="btn btn-secondary"
                                                        data-bs-dismiss="modal">Close</button>
                                                    <button type="button" class="btn btn-danger"
                                                        onclick="cancelOrder('<%= order._id %>', '<%= element.product._id %>')">Cancel
                                                        order</button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>


                                    <% } %>


                                        <% if (element.orderStatus==="Delivered" ) { %>

                                            <button type="button" class="btn btn-danger" data-bs-toggle="modal"
                                                <%=element.isReturnRequested ? 'disabled' : '' %>

                                                data-bs-target="#exampleModal" data-bs-whatever="@mdo">Return
                                                Product</button>



                                            <div class="modal fade" id="exampleModal" tabindex="-1"
                                                aria-labelledby="exampleModalLabel" aria-hidden="true">
                                                <div class="modal-dialog">
                                                    <div class="modal-content">
                                                        <div class="modal-header">
                                                            <h1 class="modal-title fs-5" id="exampleModalLabel">
                                                                Reason
                                                            </h1>
                                                            <button type="button" class="btn-close"
                                                                data-bs-dismiss="modal" aria-label="Close"></button>
                                                        </div>
                                                        <div class="modal-body">
                                                            <form>
                                                                <div class="mb-3">
                                                                    <label for="message-text"
                                                                        class="col-form-label">Cancel
                                                                        Reason</label>
                                                                    <div id="error-message" style="color: red;">
                                                                    </div>
                                                                    <textarea class="form-control" id="message-text"
                                                                        placeholder="please text your reason"></textarea>
                                                                </div>
                                                            </form>
                                                        </div>
                                                        <div class="modal-footer">
                                                            <button type="button" class="btn btn-secondary"
                                                                data-bs-dismiss="modal">Close</button>
                                                            <button type="button" class="btn btn-danger"
                                                                onclick="returnOrder('<%= order._id %>', '<%= element.product._id %>')">Retrun</button>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>



                                            <% } %>




                </div>

                <span class="order-detail-status">


                    <%= element.isReturnRequested ? (element.isAdminAcceptedReturn==='Accepted'
                        ? 'Return Request Accepted' : (element.isAdminAcceptedReturn==='Rejected'
                        ? 'Return Request Rejected' : 'Return Requested' )) : element.orderStatus %>

                </span>



            </div>

            <% }) %>
    </div>



    <div class="order-detail-summary">
        <div class="order-detail-summary-row">
            <span>Subtotal</span>
            <span>₹<%= order?.totalAmount%></span>
        </div>
        <div class="order-detail-summary-row">
            <span>Delivery Charge</span>
            <span>₹40</span>
        </div>
        <div class="order-detail-summary-row">
            <span>Coupon</span>
            <span>₹<%= discountPrice %></span>
        </div>
        <div class="order-detail-summary-row">
            <span>Total</span>
            <span>₹<%= order?.payableAmount %></span>
        </div>
    </div>


</div>



<!-- CANCEL ORDER MODAL -->


<script src="https://checkout.razorpay.com/v1/checkout.js"></script>


<script>


    function cancelOrder(OrderId, ProductId) {

        let message = document.getElementById('message-text').value.trim();

        let messageRegex = /^[^ ,]+$/;

        let errorMessageContainer = document.getElementById('error-message');

        console.log(message);


        console.log("This is the text ", message);

        if (!message || message.length == 0 ) {
            let element = document.createElement('div');

            errorMessageContainer.textContent = 'Please enter valid Reason';
            errorMessageContainer.style.fontSize = '12px';

            return;

        } else if (messageRegex.test(message)) {

            let element = document.createElement('div');

            errorMessageContainer.textContent = 'Please enter valid Reason';
            errorMessageContainer.style.fontSize = '12px';

            return ;
          
        }else{
            errorMessageContainer.textContent = '';
        }

        Swal.fire({
            title: 'Are you sure?',
            text: 'Do you really want to cancel this order?',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Yes, cancel it!',
            cancelButtonText: 'No, keep it',
            reverseButtons: true,
        }).then((result) => {
            if (result.isConfirmed) {
                // Proceed with the cancellation
                console.log("hai hello product cancellation", ProductId);
                console.log("hai hello order cancellation", OrderId);

                const xhr = new XMLHttpRequest();
                xhr.open('POST', '/cancelOrder', true);
                xhr.setRequestHeader('Content-Type', 'application/json');
                const data = JSON.stringify({ orderId: OrderId, productId: ProductId, message: message });
                xhr.send(data);

                xhr.onreadystatechange = () => {
                    if (xhr.readyState === 4 && xhr.status === 200) {
                        const response = JSON.parse(xhr.responseText);

                        if (response.success) {
                            Swal.fire({
                                icon: 'success',
                                title: 'Order cancelled successfully',
                                showConfirmButton: false,
                                timer: 1000,
                            }).then(() => {
                                window.location.reload();
                            });
                        }
                    } else if (xhr.readyState === 4) {
                        console.log("Something went wrong");

                        Swal.fire({
                            icon: 'error',
                            title: 'Something went wrong',
                            text: 'Please try again',
                            showConfirmButton: false,
                            timer: 1500,
                        });
                    }
                };
            } else if (result.dismiss === Swal.DismissReason.cancel) {
                // User canceled the action
                Swal.fire({
                    icon: 'info',
                    title: 'Cancelled',
                    text: 'Your order was not cancelled.',
                    showConfirmButton: false,
                    timer: 1500,
                });
            }
        });
    }



    function returnOrder(orderId, productId) {

        console.log("this is my order id ", orderId);
        console.log("this is my product id ", productId);

        let message = document.getElementById('message-text').value.trim()
        let messageRegex = /^[^ ,]+$/;
        let errorMessageContainer = document.getElementById('error-message');

        console.log(message);


        console.log("This is the text ", message);

        if (!message || message.length == 0) {
            let element = document.createElement('div');

            errorMessageContainer.textContent = 'Please enter valid Reason';
            errorMessageContainer.style.fontSize = '12px';

            return;

        } else if (messageRegex.test(message)) {

            let element = document.createElement('div');

            errorMessageContainer.textContent = 'Please enter valid Reason';
            errorMessageContainer.style.fontSize = '12px';
            return;

        } else {
            errorMessageContainer.textContent = '';
        }


        Swal.fire({
            title: 'Are you sure?',
            text: 'Do you really want to return this product',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, do it!'
        }).then((result) => {
            if (result.isConfirmed) {


                fetch('/return-order', {

                    method: 'POST',

                    headers: { 'Content-Type': 'application/json' },

                    body: JSON.stringify({
                        orderId,
                        productId,
                        message
                    }),

                }).then((response) => {

                    if (response.ok) {

                        console.log("Order returned successfully");

                        Swal.fire({
                            icon: 'success',
                            title: 'Returned',
                            text: response.message || 'Your order has been returned successfully'
                        }).then(() => {
                            window.location.reload();
                        })

                    } else {

                        Swal.fire({
                            icon: 'error',
                            title: 'ERROR!',
                            text: 'Something went wrong while returning the order.',

                        })

                        console.log("something went wrong", response.status);

                    }
                }).catch((error) => {
                    console.log(error);

                    Swal.fire({
                        icon: 'error',
                        title: 'ERROR!',
                        text: 'Unexpected Error Occured  Please Try Again Later '
                    })
                });
            }
        })




    }


    async function Repayment(orderId, PayableAmount, SubtotalAmount, couponId) {

        try {

            console.log("this is my order id",orderId);
            console.log("this is my payableAmount",PayableAmount);
            console.log("this is Subtotalamount",SubtotalAmount);
            console.log("this is my couponId",couponId);

            const response = await fetch('/create_razorpay_oder', {

                method: 'POST',

                headers: { 'Content-Type': 'application/json' },

                body: JSON.stringify({ orderId: orderId, PayableAmount: PayableAmount, SubtotalAmount: SubtotalAmount, couponId: couponId })
            })

            const result = await response.json();

            console.log("This is the ", response);
            console.log("This is the result", result);



            if (result.success) {
                const options = {
                    key: 'rzp_test_ZPlMwH8hdwliYC',
                    amount: result.payableAmount * 100,
                    currency: 'INR',
                    name: 'Tokyo Cars',
                    description: 'Test Payment',
                    order_id: result.razorpayOrderId,
                    handler: async function (paymentResponse) {

                        try {

                            const response = await fetch('/re_payment', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify({
                                    orderId: orderId
                                })
                            })

                            const result = await response.json();

                            console.log("This is the resultttttttttt ", result);


                            if (result.success) {
                                Swal.fire({
                                    icon: 'success',
                                    title: 'Your Payment is successfully',
                                    text: 'Thank you for purchasing product',
                                    showConfirmButton: false,
                                }).then(() => {
                                    window.location.reload();
                                })
                            } else {

                                Swal.fire({
                                    icon: 'error',
                                    title: 'Payment Failed',
                                    text: result.message || 'Payment verification failed. Please try again.',
                                    showConfirmButton: true,
                                    timer: 1500
                                });
                            }

                        } catch (error) {

                            console.error('Error verifying payment:', error);
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: 'An unexpected error occurred while verifying the payment.',
                                showConfirmButton: true,
                                timer: 1500
                            });

                        }

                    },

                    prefill: {
                        name: 'Tokyo Cars',
                        email: 'tokyo@gmail.com',
                        contact: '91212234567',
                    },

                    notes: {
                        address: 'Tokyo, Japan'
                    },

                    theme: {
                        color: '#007bff',
                    },

                    modal: {
                        ondismiss: function () {

                            Swal.fire({
                                icon: 'error',
                                title: 'Payment Failed',
                                showCancelButton: false,
                                timer: 1500
                            }).then(() => {
                                window.location.reload();
                            })

                        }
                    }

                };

                console.log("Final Razorpay options:", options);

                const razorpay = new Razorpay(options);
                razorpay.open();
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Order Creation Failed',
                    text: 'Failed to create the Razorpay order. Please try again.',
                    showConfirmButton: true,
                    timer: 1500
                });
            }

        } catch (error) {

        }

    }


</script>